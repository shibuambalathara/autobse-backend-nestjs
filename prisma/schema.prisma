// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql" // or mysql or sqlite
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


enum EventStatusType {
  pending
  blocked
  active
  inactive
  stop
  pause
}

enum EventBidLockType {
  locked
  unlocked
}


enum VehicleBidStatusType {
  pending
  approved
  fulfilled
  declined
}

enum UserRoleType {
  admin
  staff
  seller
  dealer
}

enum StateNames {
  Maharashtra
  Bihar
  Chhattisgarh
  Karnataka
  Manipur
  Arunachal_Pradesh
  Assam
  Gujarat
  Punjab
  Mizoram
  Andhra_Pradesh
  West_Bengal
  Goa
  Haryana
  Himachal_Pradesh
  Kerala
  Rajasthan
  Jharkhand
  Madhya_Pradesh
  Odisha
  Nagaland
  TamilNadu
  Uttar_Pradesh
  Telangana
  Meghalaya
  Sikkim
  Tripura
  Uttarakhand
  Jammu_and_Kashmir
  Delhi
}

enum PaymentStatusTypes {
  approved
  pending
  rejected
}


model User {
  id                        String               @id @default(cuid())
  idNo                      Int                  @unique @default(autoincrement())
  dealerId                  String               @default("")
  firstName                 String               @default("")
  lastName                  String               @default("")
  email                     String               @default("")
  username                  String               @default("")
  // phone                     String               @default("")
  businessName              String               @default("")
  // category                  EventType[]          @relation("EventType_users")
  mobile                    String               @unique @default("")
  password                  String?
  BalanceEMDAmount        Int?                 @default(0)
  // specialVehicleBuyingLimit Int?                 @default(0)
  // image_filesize            Int?
  // image_extension           String?
  // image_width               Int?
  // image_height              Int?
  // image_id                  String?
  // pancard_filesize          Int?
  // pancard_extension         String?
  // pancard_width             Int?
  // pancard_height            Int?
  // pancard_id                String?
  pancardNo                 String               @default("")
  // idProof_filesize          Int?
  // idProof_extension         String?
  // idProof_width             Int?
  // idProof_height            Int?
  // idProof_id                String?
  // idProofBack_filesize      Int?
  // idProofBack_extension     String?
  // idProofBack_width         Int?
  // idProofBack_height        Int?
  // idProofBack_id            String?
  // idProofType               UserIdProofTypeType?
  idProofNo                 String               @default("")
  // dealership_filesize       Int?
  // dealership_extension      String?
  // dealership_width          Int?
  // dealership_height         Int?
  // dealership_id             String?
  country                   String               @default("")
  city                      String               @default("")
  role                      UserRoleType        @default(dealer)
  // watchList                 Vehicle[]            @relation("User_watchList")
  // emdUpdates                EmdUpdate[]          @relation("EmdUpdate_user")
  payments                  Payment[]            @relation("Payment_user")
  // emdUpdatesByAdmin         EmdUpdate[]          @relation("EmdUpdate_createdBy")
  paymentCreatedBy            Payment?             @relation("Payment_createdBy")
  // status                    UserStatusType?      @default(pending)
  state                     StateNames        
  //stateCreatedBy               State[]              @relation("state_createdBy")
  locationCreatedBy            Location[]           @relation("location_createdBy")
  VehicleCategoryCreatedBy     VehicleCategory[]    @relation("vehiclecategory_createdBy")
  sellerCreatedBy              Seller[]             @relation("seller_createdBy")
  vehicleCreatedBy             Vehicle[]            @relation("vehicle_createdBy")
  eventCreatedBy               Event[]              @relation("event_createdBy")
  execlUploadCreatedBy         ExcelUpload[]        @relation("excelupload_createdBy")
  statusCreatedBy              Status[]             @relation("status_createdBy")
  activeBids                   Vehicle[]            @relation("Vehicle_currentBidUser")
  // quotedBids                Bid[]                @relation("Bid_user")
  // bannedSellers             Seller[]             @relation("Seller_bannedUsers")
  // coupenDetail              Coupen[]             @relation("Coupen_userDetail")
  eventDetail                  Event[]              @relation("Event_participants")
  // workSheetDetail           WorkSheet[]          @relation("WorkSheet_userDetail")
  // deletedBid                DeletedBid[]         @relation("DeletedBid_user")
  // sellACar                  SellACar[]           @relation("SellACar_user")
  // notification              Notification[]       @relation("Notification_user")
  userCategory              String               @default("")
  tempToken                 Int?                 @unique
  createdAt                 DateTime?            @default(now())
  updatedAt                 DateTime?            @updatedAt
  accessToken           String?
  isDeleted               Boolean               @default(false)
  // magicAuthIssuedAt         DateTime?
  // magicAuthRedeemedAt       DateTime?
}


//model State {
  //id                 String        @id @default(cuid())
  //name               StateNames    @default(Kerala)
  //createdAt          DateTime?     @default(now())
  //updatedAt          DateTime?     @updatedAt
  //createdBy          User?         @relation("state_createdBy", fields: [createdById], references: [id])      
  //createdById        String?
  //isDeleted          Boolean       @default(false)
  //location           Location[]
//}

model Location{
  id                String         @id @default(cuid())
  name              String         @unique @default("")
  country           String         @default("india")
  state             StateNames         
  createdBy         User?         @relation("location_createdBy", fields: [createdById], references: [id])             
  createdById       String?
  createdAt         DateTime?      @default(now())
  updatedAt         DateTime?      @updatedAt
  isDeleted         Boolean        @default(false)
  events             Event[]       @relation("Event_location")
}

model VehicleCategory{
  id                String         @id @default(cuid())
  name              String         @unique @default("")
  createdAt         DateTime?      @default(now())
  updatedAt         DateTime?      @updatedAt
  createdBy         User?          @relation("vehiclecategory_createdBy",fields: [createdById], references: [id])             
  createdById       String?
  isDeleted         Boolean        @default(false)
  events             Event[]        @relation("Event_vehicleCategory")
}

model Seller {
  id                   String      @id @default(cuid())
  name                 String      @unique @default("")
  contactPerson        String      @default("")
  GSTNumber           String      @default("")
  billingContactPerson String      @default("")
  mobile               String      @default("")
  nationalHead         String      @default("")
  logo                 String      @default("")
  createdAt            DateTime?   @default(now())
  updatedAt            DateTime?   @updatedAt
  createdBy            User?       @relation("seller_createdBy",fields: [createdById], references: [id])             
  createdById          String?
  isDeleted            Boolean     @default(false)
  events               Event[]     @relation("Event_seller")
}

model Vehicle {
  id                     String                @id @default(cuid())
  vehicleIndexNo         Int                   @default(autoincrement())
  registrationNumber     String                
  bidTimeExpire          DateTime
  bidStartTime           DateTime
  bidAmountUpdate        Int?
  currentBidAmount       Int?                  @default(0)
  startBidAmount         Float?                @default(0)
  currentBidUser         User?                 @relation("Vehicle_currentBidUser", fields: [currentBidUserId], references: [id])
  currentBidUserId       String?               
  event                  Event?                @relation("Vehicle_event", fields: [eventId], references: [id])
  eventId                String?               
  bidStatus              VehicleBidStatusType? @default(pending)
  //userVehicleBids        Bid[]                 @relation("Bid_bidVehicle")
  loanAgreementNo        String                
  registeredOwnerName    String                @default("")
  quoteIncreament        Int?                  @default(1000)
  make                   String                @default("")
  model                  String                @default("")
  varient                String                @default("")
  category               String                @default("")
  fuel                   String                @default("")
  type                   String                @default("")
  rcStatus               String                @default("")
  YOM                    Int?
  ownership              Int?
  mileage                Int?
  kmReading              Int?                  @default(0)
  insuranceStatus        String                @default("")
  yardLocation           String                @default("")
  startPrice             Float?                @default(0)
  reservePrice           Float?                @default(0)
  repoDt                 String?
  veicleLocation         String                @default("")
  vehicleRemarks         String                @default("")
  auctionManager         String                @default("")
  parkingCharges         String                @default("")
  insurance              String                @default("")
  insuranceValidTill     String?
  tax                    String                @default("")
  taxValidityDate        String?
  fitness                String                @default("")
  permit                 String                @default("")
  //fitnessPermit          String                @default("")
  engineNo               String                @default("")
  chassisNo              String                @default("")
  image                  String                @default("")
  inspectionLink         String                @default("")
  autobseContact         String                @default("")
  autobse_contact_person String                @default("")
  vehicleCondition       String                @default("")
  powerSteering          String                @default("")
  shape                  String                @default("")
  color                  String                @default("")
  state                  String                @default("")
  city                   String                @default("")
  area                   String                @default("")
  paymentTerms           String                @default("")
  dateOfRegistration     String?
  hypothication          String                @default("")
  climateControl         String                @default("")
  doorCount              Int?
  gearBox                String                @default("")
  buyerFees              String                @default("")
  rtoFine                String                @default("")
  parkingRate            String                @default("")
  approxParkingCharges   String                @default("")
  clientContactPerson    String                @default("")
  clientContactNo        String                @default("")
  additionalRemarks      String                @default("")
  //ExcelFile              ExcelUpload?          @relation("Vehicle_ExcelFile", fields: [ExcelFileId], references: [id])
  //ExcelFileId            String?               @map("ExcelFile")
  lotNumber              Int?
  //coupenDetail           Coupen?               @relation("Coupen_vehicleDetail")
  createdAt              DateTime?             @default(now())
  updatedAt              DateTime?             @updatedAt
  createdBy              User?                 @relation("vehicle_createdBy",fields: [createdById], references: [id])             
  createdById            String?
  isDeleted              Boolean               @default(false)
}
enum EventCategory {
  open
  online
}
model Event {
  id                        String            @id @default(cuid())
  eventNo                   Int               @default(autoincrement())
  eventCategory             EventCategory
  startDate                 DateTime
  endDate                   DateTime
  firstVehicleEndDate       DateTime?
  pauseDate                 DateTime?
  pausedTotalTime           Int?              @default(0)
  seller                    Seller?           @relation("Event_seller", fields: [sellerId], references: [id])
  sellerId                  String?           
  vehicleCategory           VehicleCategory?  @relation("Event_vehicleCategory", fields:[vehicleCategoryId], references:[id])
  vehicleCategoryId         String?         
  location                  Location?         @relation("Event_location", fields: [locationId], references: [id])
  locationId                String?           
  vehicles                  Vehicle[]         @relation("Vehicle_event")
  noOfBids                  Int
  participants              User[]            @relation("Event_participants")
  status                    EventStatusType?  @default(active)
  //ExcelFile                 ExcelUpload?      @relation("Event_ExcelFile", fields: [ExcelFileId], references: [id])
  //ExcelFileId               String?           @unique @map("ExcelFile")
  // downloadableFile_filesize Int?
  downloadableFile_filename String?
  termsAndConditions        String            @default("")
  createdAt                 DateTime?         @default(now())
  updatedAt                 DateTime?         @updatedAt
  createdBy                 User?             @relation("event_createdBy",fields: [createdById], references: [id])             
  createdById               String?
  bidLock                   EventBidLockType? @default(unlocked)
  extraTimeTrigerIn         Int?              @default(2)
  extraTime                 Int?              @default(2)
  vehicleLiveTimeIn         Int?              @default(0)
  gapInBetweenVehicles      Int?              @default(0)
  isDeleted                 Boolean           @default(false)
}

model ExcelUpload {
  id            String    @id @default(cuid())
  name          String    @default("")
  file_filename String?
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt
  createdBy     User?     @relation("excelupload_createdBy",fields: [createdById], references: [id])             
  createdById   String?
  isDeleted     Boolean   @default(false)
}

model Status{
  id            String              @id @default(cuid())
  status        PaymentStatusTypes  @default(pending)
  comment       String?
  createdAt     DateTime?           @default(now())
  updatedAt     DateTime?           @updatedAt
  createdBy     User?               @relation("status_createdBy",fields: [createdById], references: [id])             
  createdById   String?
  isDeleted     Boolean             @default(false)
  payment       Payment?
}


model Payment{
  id                 String      @id @default(cuid())
  refNo              Int         @default(autoincrement())
  amount             Int?        @default(10000)
  description        String      @default("")
  status             Status?     @relation(fields: [statusId], references: [id])
  statusId           String?     @unique
  user               User?       @relation("Payment_user", fields: [userId], references: [id])
  userId             String?     
  image              String?
  createdAt          DateTime?   @default(now())
  createdBy          User?       @relation("Payment_createdBy", fields: [createdById], references: [id])
  createdById        String?     @unique @map("createdBy")
  updatedAt          DateTime?   @updatedAt
  registrationExpire DateTime?  
  isDeleted          Boolean     @default(false)     
}

model RecentSold{
  id                 String      @id @default(cuid())
  image              String?
  vehicleName        String?
  location           String?
  soldDate           String?
  createdAt          DateTime?   @default(now())
  updatedAt          DateTime?   @updatedAt
  isDeleted          Boolean     @default(false)     
}


